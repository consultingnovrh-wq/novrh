// Script de diagnostic pour le probl√®me d'acc√®s admin
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://dsxkfzqqgghwqiihierm.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRzeGtmenFxZ2dod3FpaWhpZXJtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5MDcwMjEsImV4cCI6MjA3NDQ4MzAyMX0.bu-8fh0epR9zaBuW9KhkTD99wpWGfSFTVyxCApLaqoQ";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function debugAdmin() {
  try {
    console.log('üîç Diagnostic du probl√®me d\'acc√®s admin...');
    
    // 1. V√©rifier l'utilisateur connect√©
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'utilisateur:', userError);
      return;
    }
    
    if (!user) {
      console.log('‚ùå Aucun utilisateur connect√©');
      console.log('üí° Solution: Connectez-vous d\'abord avec admin@novrh.com');
      return;
    }
    
    console.log('‚úÖ Utilisateur connect√©:', user.email);
    console.log('üÜî User ID:', user.id);
    
    // 2. V√©rifier le profil
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', user.id)
      .single();
    
    if (profileError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du profil:', profileError);
      return;
    }
    
    if (!profile) {
      console.log('‚ùå Aucun profil trouv√© pour cet utilisateur');
      return;
    }
    
    console.log('‚úÖ Profil trouv√©:');
    console.log('   - Email:', profile.email);
    console.log('   - Type:', profile.user_type);
    console.log('   - Actif:', profile.is_active);
    console.log('   - Email v√©rifi√©:', profile.email_verified);
    
    // 3. V√©rifier si c'est un admin
    if (profile.user_type !== 'admin') {
      console.log('‚ùå L\'utilisateur n\'est pas de type admin');
      console.log('üí° Solution: Mettez √† jour le profil pour le rendre admin');
      return;
    }
    
    // 4. V√©rifier la table administrators
    const { data: admin, error: adminError } = await supabase
      .from('administrators')
      .select(`
        *,
        role:admin_roles(*)
      `)
      .eq('user_id', user.id)
      .single();
    
    if (adminError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'administrateur:', adminError);
      return;
    }
    
    if (!admin) {
      console.log('‚ùå Aucun administrateur trouv√© pour cet utilisateur');
      console.log('üí° Solution: Cr√©ez une entr√©e dans la table administrators');
      return;
    }
    
    console.log('‚úÖ Administrateur trouv√©:');
    console.log('   - Admin ID:', admin.id);
    console.log('   - Actif:', admin.is_active);
    console.log('   - R√¥le:', admin.role?.display_name);
    console.log('   - Permissions:', admin.role?.permissions);
    
    // 5. Test de la fonction checkIsAdmin
    console.log('\nüß™ Test de la fonction checkIsAdmin...');
    
    // Simuler la logique du hook
    const { data: profileCheck } = await supabase
      .from('profiles')
      .select('user_type')
      .eq('user_id', user.id)
      .single();
    
    if (!profileCheck || profileCheck.user_type !== 'admin') {
      console.log('‚ùå checkIsAdmin retournerait false (profil)');
      return;
    }
    
    const { data: adminCheck } = await supabase
      .from('administrators')
      .select('id, is_active')
      .eq('user_id', user.id)
      .eq('is_active', true)
      .single();
    
    if (!adminCheck) {
      console.log('‚ùå checkIsAdmin retournerait false (administrateur)');
      return;
    }
    
    console.log('‚úÖ checkIsAdmin retournerait true');
    console.log('\nüéâ Tout semble correct ! Le probl√®me pourrait √™tre:');
    console.log('   1. Cache du navigateur');
    console.log('   2. Session expir√©e');
    console.log('   3. Probl√®me de RLS (Row Level Security)');
    console.log('   4. Erreur JavaScript dans la console');
    
    // 6. V√©rifier les politiques RLS
    console.log('\nüîí V√©rification des politiques RLS...');
    
    const { data: rlsTest, error: rlsError } = await supabase
      .from('administrators')
      .select('id')
      .eq('user_id', user.id);
    
    if (rlsError) {
      console.error('‚ùå Erreur RLS:', rlsError);
    } else {
      console.log('‚úÖ RLS OK - Acc√®s autoris√© √† la table administrators');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le diagnostic
debugAdmin();
