import { createClient } from '@supabase/supabase-js';

// Remplacez par vos vraies cl√©s Supabase
const supabaseUrl = 'https://votre-projet.supabase.co'; // Remplacez par votre URL
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'; // Remplacez par votre service_role key

const supabase = createClient(supabaseUrl, supabaseKey);

async function fixAdminProfile() {
  try {
    console.log('üîç Recherche de l\'utilisateur speakaboutai@gmail.com...');
    
    // Trouver l'utilisateur par email
    const { data: users, error: userError } = await supabase.auth.admin.listUsers();
    
    if (userError) {
      console.error('‚ùå Erreur lors de la recherche des utilisateurs:', userError);
      return;
    }
    
    const user = users.users.find(u => u.email === 'speakaboutai@gmail.com');
    
    if (!user) {
      console.error('‚ùå Utilisateur speakaboutai@gmail.com non trouv√©');
      return;
    }
    
    console.log('‚úÖ Utilisateur trouv√©:', user.id);
    
    // V√©rifier si le profil existe
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', user.id)
      .single();
    
    if (profileError) {
      console.log('‚ö†Ô∏è Profil non trouv√©, cr√©ation...');
      
      // Cr√©er le profil admin
      const { error: createError } = await supabase
        .from('profiles')
        .insert({
          user_id: user.id,
          user_type: 'admin',
          email: user.email,
          first_name: 'Admin',
          last_name: 'NovRH',
          is_active: true,
          email_verified: true
        });
      
      if (createError) {
        console.error('‚ùå Erreur lors de la cr√©ation du profil:', createError);
        return;
      }
      
      console.log('‚úÖ Profil admin cr√©√© avec succ√®s !');
    } else {
      console.log('üìù Profil existant trouv√©, mise √† jour...');
      
      // Mettre √† jour le profil existant
      const { error: updateError } = await supabase
        .from('profiles')
        .update({
          user_type: 'admin',
          email: user.email,
          first_name: 'Admin',
          last_name: 'NovRH',
          is_active: true,
          email_verified: true
        })
        .eq('user_id', user.id);
      
      if (updateError) {
        console.error('‚ùå Erreur lors de la mise √† jour:', updateError);
        return;
      }
      
      console.log('‚úÖ Profil admin mis √† jour avec succ√®s !');
    }
    
    console.log('üéâ Configuration termin√©e ! Vous pouvez maintenant vous connecter sur /admin');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

fixAdminProfile();
