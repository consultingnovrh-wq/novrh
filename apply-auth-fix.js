// Script pour appliquer la correction d'authentification
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://dsxkfzqqgghwqiihierm.supabase.co";
const SUPABASE_SERVICE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRzeGtmenFxZ2dod3FpaWhpZXJtIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1ODkwNzAyMSwiZXhwIjoyMDc0NDgzMDIxfQ.uPw8Jjnaj6QI25wlwQt9C0wPHj90W0nPcUNOvthC-RY";

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function applyAuthFix() {
  try {
    console.log('üîß Application de la correction d\'authentification...\n');
    
    // 1. Supprimer les politiques RLS probl√©matiques
    console.log('üóëÔ∏è Suppression des politiques RLS probl√©matiques...');
    
    const policiesToDrop = [
      'Admins can view all profiles',
      'Admins can update all profiles', 
      'Users can view their own profile',
      'Users can update their own profile',
      'Allow profile creation during registration'
    ];
    
    for (const policy of policiesToDrop) {
      try {
        await supabase.rpc('exec_sql', { 
          sql: `DROP POLICY IF EXISTS "${policy}" ON public.profiles;` 
        });
        console.log(`‚úÖ Politique "${policy}" supprim√©e`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Politique "${policy}" non trouv√©e ou d√©j√† supprim√©e`);
      }
    }
    
    // 2. D√©sactiver temporairement RLS
    console.log('\nüîì D√©sactivation temporaire de RLS...');
    await supabase.rpc('exec_sql', { 
      sql: 'ALTER TABLE public.profiles DISABLE ROW LEVEL SECURITY;' 
    });
    console.log('‚úÖ RLS d√©sactiv√© sur profiles');
    
    // 3. R√©activer RLS avec des politiques permissives
    console.log('\nüîí R√©activation de RLS avec des politiques permissives...');
    await supabase.rpc('exec_sql', { 
      sql: 'ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;' 
    });
    
    // 4. Cr√©er des politiques permissives
    const newPolicies = [
      {
        name: 'Anyone can view profiles',
        sql: `CREATE POLICY "Anyone can view profiles" ON public.profiles FOR SELECT USING (true);`
      },
      {
        name: 'Users can update their own profile',
        sql: `CREATE POLICY "Users can update their own profile" ON public.profiles FOR UPDATE USING (auth.uid() = user_id);`
      },
      {
        name: 'Allow profile creation',
        sql: `CREATE POLICY "Allow profile creation" ON public.profiles FOR INSERT WITH CHECK (true);`
      }
    ];
    
    for (const policy of newPolicies) {
      try {
        await supabase.rpc('exec_sql', { sql: policy.sql });
        console.log(`‚úÖ Politique "${policy.name}" cr√©√©e`);
      } catch (error) {
        console.error(`‚ùå Erreur cr√©ation politique "${policy.name}":`, error.message);
      }
    }
    
    // 5. V√©rifier l'√©tat du compte admin
    console.log('\nüîç V√©rification du compte admin...');
    const { data: adminProfile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', '646e81ca-b467-41c3-a376-ab57347131d9')
      .single();
    
    if (profileError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du profil admin:', profileError);
    } else {
      console.log('‚úÖ Profil admin trouv√©:');
      console.log(`   Email: ${adminProfile.email}`);
      console.log(`   Type: ${adminProfile.user_type}`);
      console.log(`   Actif: ${adminProfile.is_active}`);
    }
    
    // 6. Test de connexion
    console.log('\nüß™ Test de connexion...');
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'admin@novrh.com',
      password: 'admin123456'
    });

    if (authError) {
      console.error('‚ùå Erreur de connexion:', authError.message);
      console.log('\nüîß La correction n\'a pas r√©solu le probl√®me.');
      console.log('üí° Essayez de red√©marrer le serveur de d√©veloppement.');
    } else {
      console.log('‚úÖ Connexion r√©ussie!');
      console.log(`   Utilisateur: ${authData.user.email}`);
      console.log(`   ID: ${authData.user.id}`);
      console.log('\nüéâ CORRECTION APPLIQU√âE AVEC SUCC√àS !');
      console.log('üåê Vous pouvez maintenant acc√©der √†: http://localhost:8081/admin');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'application de la correction:', error);
    console.log('\nüí° Solution alternative:');
    console.log('1. Ouvrez Supabase Dashboard ‚Üí SQL Editor');
    console.log('2. Copiez le contenu de supabase/migrations/20250117000009-fix-auth-rls.sql');
    console.log('3. Ex√©cutez le script manuellement');
  }
}

// Ex√©cuter le script
applyAuthFix();
